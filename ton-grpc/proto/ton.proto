syntax = "proto3";

package ton;

service TvmEmulator {
  rpc Process(stream TvmEmulatorRequest) returns (stream TvmEmulatorResponse);
}

message TvmEmulatorRequest {
  uint64 request_id = 1;
  oneof Request {
    TvmEmulatorPrepareRequest prepare = 2;
    TvmEmulatorRunGetMethodRequest run_get_method = 3;
    TvmEmulatorSendExternalMessageRequest send_external_message = 4;
    TvmEmulatorSendInternalMessageRequest send_internal_message = 5;
    TvmEmulatorSetLibrariesRequest set_libraries = 6;
    TvmEmulatorSetGasLimitRequest set_gas_limit = 7;
    TvmEmulatorSetC7Request set_c7 = 8;
  }
}

message TvmEmulatorResponse {
  uint64 request_id = 1;
  oneof Response {
    TvmEmulatorPrepareResponse prepare_response = 2;
    TvmEmulatorRunGetMethodResponse run_get_method_response = 3;
    TvmEmulatorSendExternalMessageResponse send_external_message_response = 4;
    TvmEmulatorSendInternalMessageResponse send_internal_message_response = 5;
    TvmEmulatorSetLibrariesResponse set_libraries_response = 6;
    TvmEmulatorSetGasLimitResponse set_gas_limit_response = 7;
    TvmEmulatorSetC7Response set_c7_response = 8;
  }
}

message TvmEmulatorPrepareRequest {
  string code_boc = 1;
  string data_boc = 2;
}

message TvmEmulatorPrepareResponse {
  bool success = 1;
}

message TvmEmulatorRunGetMethodRequest {
  int32 method_id = 1;
  string stack_boc = 2;
}

message TvmEmulatorRunGetMethodResponse {
  int32 vm_exit_code = 1;
  string gas_used = 2;
  string vm_log = 3;
  string stack = 4;
  optional string missing_library = 5;
}

message TvmEmulatorSendExternalMessageRequest {
  string message_body_boc = 1;
}

message TvmEmulatorSendExternalMessageResponse {
  int32 vm_exit_code = 1;
  bool accepted = 2;
  string gas_used = 3;
  string vm_log = 4;
  string new_code = 5;
  string new_data = 6;
  optional string missing_library = 7;
  optional string actions = 8;
}

message TvmEmulatorSendInternalMessageRequest {
  uint64 amount = 1;
  string message_body_boc = 2;
}

message TvmEmulatorSendInternalMessageResponse {
  int32 vm_exit_code = 1;
  bool accepted = 2;
  string gas_used = 3;
  string vm_log = 4;
  string new_code = 5;
  string new_data = 6;
  optional string missing_library = 7;
  optional string actions = 8;
}

message TvmEmulatorSetLibrariesRequest {
  string libs_boc = 1;
}

message TvmEmulatorSetLibrariesResponse {
  bool success = 1;
}

message TvmEmulatorSetGasLimitRequest {
  int64 gas_limit = 1;
}

message TvmEmulatorSetGasLimitResponse {
  bool success = 1;
}

message TvmEmulatorSetC7Request {
  uint32 unixtime = 1;
  uint64 balance = 2;
  string address = 3;
  string rand_seed_hex = 4;
  string config = 5;
}

message TvmEmulatorSetC7Response {
  bool success = 1;
}

service TransactionEmulator {
  rpc Process(stream TransactionEmulatorRequest) returns (stream TransactionEmulatorResponse);
}

message TransactionEmulatorRequest {
  uint64 request_id = 1;
  oneof Request {
    TransactionEmulatorPrepareRequest prepare = 2;
    TransactionEmulatorEmulateRequest emulate = 3;
  }
}

message TransactionEmulatorResponse {
  uint64 request_id = 1;
  oneof Response {
    TransactionEmulatorPrepareResponse prepare_response = 2;
    TransactionEmulatorEmulateResponse emulate_response = 3;
  }
}

message TransactionEmulatorPrepareRequest {
  int32 vm_log_level = 1;
  string config_boc = 2;
}

message TransactionEmulatorPrepareResponse {
  bool success = 1;
}

message TransactionEmulatorEmulateRequest {
  string shard_account_boc = 1;
  string message_boc = 2;
}

message TransactionEmulatorEmulateResponse {
  string transaction = 1;
  string shard_account = 2;
  string vm_log = 3;
  string actions = 4;
}

syntax = "proto3";

package ton;

service AccountService {
  rpc GetAccountState (GetAccountStateRequest) returns (GetAccountStateResponse);
  rpc GetShardAccountCell (GetShardAccountCellRequest) returns (GetShardAccountCellResponse);
  rpc GetAccountTransactions (GetAccountTransactionsRequest) returns (stream Transaction);
}

message GetAccountStateRequest {
  string account_address = 1;

  /* optional */ oneof criteria {
    BlockId block_id = 2;
    PartialTransactionId transaction_id = 3;
    BlockId at_least_block_id = 4;
  }
}

message GetAccountStateResponse {
  string account_address = 1;
  BlockIdExt block_id = 2;
  int64 balance = 3;
  optional TransactionId last_transaction_id = 4;
  oneof account_state {
    ActiveAccountState active = 5;
    FrozenAccountState frozen = 6;
    UninitializedAccountState uninitialized = 7;
  }
}

message GetShardAccountCellRequest {
  string account_address = 1;
  /* optional */ oneof criteria {
    BlockId block_id = 2;
    PartialTransactionId transaction_id = 3;
    BlockId at_least_block_id = 4;
  }
}

message GetShardAccountCellResponse {
  string account_address = 1;
  BlockIdExt block_id = 2;
  TvmCell cell = 3;
}

message GetAccountTransactionsRequest {
  message Bound {
    enum Type {
      INCLUDED = 0;
      EXCLUDED = 1;
    }
    Type type = 1;

    oneof bound {
      BlockId block_id = 2;
      PartialTransactionId transaction_id = 3;
    }
  }

  enum Order {
    UNORDERED = 0; // default
    FROM_NEW_TO_OLD = 1;
//    FROM_OLD_TO_NEW = 2;
  }

  string account_address = 1;
  Order order = 2;

  optional Bound from = 3;
  optional Bound to = 4;
}

message BlockId {
  int32 workchain = 1;
  int64 shard = 2;
  int32 seqno = 3;
  optional string root_hash = 4;
  optional string file_hash = 5;
}

message BlockIdExt {
  int32 workchain = 1;
  int64 shard = 2;
  int32 seqno = 3;
  string root_hash = 4;
  string file_hash = 5;
}

message TransactionId {
  string account_address = 1;
  string hash = 2;
  int64 lt = 3;
}

message PartialTransactionId {
  string hash = 1;
  int64 lt = 2;
}

message MessageDataRaw {
  string body = 1;
  string init_state = 2;
}

message MessageDataText {
  string text = 1;
}

message MessageDataDecryptedText {
  string text = 1;
}

message MessageDataEncryptedText {
  string text = 1;
}

message Message {
  optional string source = 1;
  optional string destination = 2;
  int64 value = 3;
  int64 fwd_fee = 4;
  int64 ihr_fee = 5;
  int64 created_lt = 6;
  string body_hash = 7;
  oneof msg_data {
      MessageDataRaw raw = 8;
      MessageDataText text = 9;
      MessageDataDecryptedText decrypted_text = 10;
      MessageDataEncryptedText encrypted_text = 11;
  }
}

message Transaction {
  TransactionId id = 1;
  int64 utime = 2;
  string data = 3;
  int64 fee = 4;
  int64 storage_fee = 5;
  int64 other_fee = 6;
  optional Message in_msg = 7;
  repeated Message out_msgs = 8;
}

message ActiveAccountState {
  string code = 2;
  string data = 3;
}

message FrozenAccountState {
  string frozen_hash = 2;
}

message UninitializedAccountState {
}

message TvmCell {
  string bytes = 1;
}

service BlockService {
  rpc GetLastBlock (GetLastBlockRequest) returns (BlockIdExt);
  rpc GetBlock (BlockId) returns (BlockIdExt);
  rpc GetShards (BlockId) returns (GetShardsResponse);
  rpc GetTransactionIds (GetTransactionIdsRequest) returns (stream TransactionId);
  rpc GetTransactions (GetTransactionsRequest) returns (stream Transaction);
  rpc GetAccountAddresses (BlockId) returns (stream AccountAddress);
}

message GetLastBlockRequest {}

message GetShardsResponse {
  repeated BlockIdExt shards = 1;
}

message GetTransactionIdsRequest {
  enum Order {
    UNORDERED = 0;
    ASC = 1;
    DESC = 2;
  }

  BlockId block_id = 1;
  Order order = 2;
}

message AccountAddress {
  string address = 1;
}

service MessageService {
  rpc SendMessage (SendRequest) returns (SendResponse);
}

message SendRequest {
  string body = 1;
}

message SendResponse {
  string hash = 1;
}

message GetTransactionsRequest {
  enum Order {
    UNORDERED = 0;
    ASC = 1;
//    DESC = 2;
  }

  BlockId block_id = 1;
  Order order = 2;
}

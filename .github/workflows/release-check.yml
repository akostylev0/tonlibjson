name: Check release build
on:
  pull_request:
    branches:
      - "master"
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  experiment:
    runs-on: "CPUBound"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@v3
        with:
          path: ./llvm
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "16"
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}
      - uses: arduino/setup-protoc@v2
      - name: Install deps
        run: sudo apt-get install -y libsecp256k1-dev libsodium-dev

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true

      - run: cargo build -vv --release --target x86_64-unknown-linux-gnu

      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --target x86_64-unknown-linux-gnu
  rust-clippy-analyze:
    name: Run rust-clippy analyzing
    runs-on:
      group: "CPUBound"
    permissions:
      contents: read
      checks: write
      security-events: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: arduino/setup-protoc@v2

      - name: Install deps
        run: sudo apt-get install -y libsecp256k1-dev libsodium-dev

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true

      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --target x86_64-unknown-linux-gnu
  build-docker-image:
    strategy:
      matrix:
        include:
          - suffix: ''
            features: ''
          - suffix: '-testnet'
            features: 'testnet'
    runs-on:
      group: "CPUBound"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set sha-short
        run: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.suffix }}
          tags: |
            type=sha
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=${{ github.head_ref }}

      - name: Configure sccache
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            sha=${{ github.sha }}
            sha_short=${{ env.GITHUB_SHA_SHORT }}
            FEATURES=${{ matrix.features }}
            ACTIONS_CACHE_URL=${{ env.ACTIONS_CACHE_URL }}
            ACTIONS_RUNTIME_TOKEN=${{ env.ACTIONS_RUNTIME_TOKEN }}
            SCCACHE_GHA_ENABLED=on
